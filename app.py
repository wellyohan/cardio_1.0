# app.py - Application Streamlit compl√®te avec les deux mod√®les
import streamlit as st
import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from PIL import Image
from scipy import stats

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction de risque cardiaque - Multi-Mod√®les",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---- 1. Chargement des mod√®les ----
@st.cache_resource
def load_models():
    """Charge tous les mod√®les et pr√©processeurs"""
    try:
        # Mod√®le Decision Tree existant
        dt_model = joblib.load('./models/heart_model_pipeline_decision_tree.joblib')
        
        # Nouveau mod√®le ANN
        ann_model = tf.keras.models.load_model('./models/heart_ann_model.h5')
        
        # Normaliseur pour l'ANN
        scaler = joblib.load('./models/ann_scaler.joblib')
        
        # Features names
        feature_names = joblib.load('./models/feature_names_decision_tree.joblib')
        
        return {
            'dt': dt_model,
            'ann': ann_model,
            'scaler': scaler,
            'feature_names': feature_names
        }
    except Exception as e:
        st.error(f"Erreur de chargement des mod√®les: {str(e)}")
        return None
    
with st.sidebar:
    # Charger le fichier CSS
    def load_css(file_name):
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
# Appliquer le CSS
load_css("./css/pre.css")

# ---- 2. Interface Utilisateur ----
def show_input_form(feature_names):
    tab1, tab2, tab3 = st.tabs(["üìã Pr√©diction", "üìä Analyse des Donn√©es", "‚ÑπÔ∏è Aide & Informations"])
    with tab1:
        
      with st.form("input_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Informations d√©mographiques")
            age = st.slider("√Çge", 1, 120, 50)
            sex = st.radio("Sexe", ["Femme", "Homme"], index=1)
            
            st.subheader("Param√®tres cliniques")
            trestbps = st.slider("Pression art√©rielle (mm Hg)", 90, 200, 120)
            chol = st.slider("Cholest√©rol (mg/dl)", 100, 600, 200)
        
        with col2:
            st.subheader("Sympt√¥mes et tests")
            cp_options = {
                0: "Typique angine",
                1: "Douleur atypique", 
                2: "Douleur non-angineuse",
                3: "Asymptomatique"
            }
            cp = st.selectbox("Type de douleur thoracique", options=cp_options.keys(), 
                            format_func=lambda x: cp_options[x])
            
            fbs = st.checkbox("Glyc√©mie √† jeun > 120 mg/dl")
            exang = st.checkbox("Angine induite par l'effort")
            oldpeak = st.slider("D√©pression ST (mm)", 0.0, 10.0, 1.0, 0.1)
        
        # Deuxi√®me ligne
        col3, col4 = st.columns(2)
        with col3:
            st.subheader("R√©sultats ECG")
            restecg_options = {
                0: "Normal", 
                1: "Anomalie onde ST-T",
                2: "Hypertrophie ventriculaire"
            }
            restecg = st.selectbox("ECG au repos", options=restecg_options.keys(),
                                 format_func=lambda x: restecg_options[x])
        
        with col4:
            st.subheader("Param√®tres avanc√©s")
            slope_options = {
                0: "Descendante",
                1: "Plate",
                2: "Ascendante"
            }
            slope = st.selectbox("Pente du segment ST", options=slope_options.keys(),
                               format_func=lambda x: slope_options[x])
        
        submitted = st.form_submit_button("Analyser le risque cardiaque")
            # if st.button("Analyser le risque cardiaque", use_container_width=True):
        
        if submitted:
            # Pr√©paration des donn√©es
            input_data = {
                'age': age,
                'sex': 1 if sex == "Homme" else 0,
                'chest pain type': cp,
                'resting bp s': trestbps,
                'cholesterol': chol,
                'fasting blood sugar': 1 if fbs else 0,
                'resting ecg': restecg,
                'exercise angina': 1 if exang else 0,
                'oldpeak': oldpeak,
                'ST slope': slope
            }
            return pd.DataFrame([input_data], columns=feature_names)
        
        
        
    with tab2:
        st.subheader("Analyse exploratoire des donn√©es")
        data = pd.read_csv("./data/clean_data.csv")
        # Statistiques descriptives
        st.markdown("### üìà Statistiques descriptives")
        st.dataframe(data.describe())
        
        # Distribution des variables cl√©s
        st.markdown("### üìä Distribution des variables cl√©s")
        
        col1, col2 = st.columns(2)
        with col1:
            fig = plt.figure(figsize=(8, 4))
            sns.histplot(data['age'], bins=20, kde=True)
            plt.title('Distribution des √¢ges')
            st.pyplot(fig)
            
        with col2:
            fig = plt.figure(figsize=(8, 4))
            sns.countplot(x='sex', data=data)
            plt.title('R√©partition par sexe (0=Femme, 1=Homme)')
            st.pyplot(fig)
        
        # Corr√©lations
        st.markdown("### üîó Matrice de corr√©lation")
        fig = plt.figure(figsize=(10, 8))
        sns.heatmap(data.corr(), annot=True, fmt=".1f", cmap="coolwarm")
        plt.title('Corr√©lation entre les variables')
        st.pyplot(fig)
        
        # Analyse par groupe de risque
        st.markdown("### ‚ö†Ô∏è Analyse par groupe de risque")
        fig = plt.figure(figsize=(12, 6))
        
        plt.subplot(2, 2, 1)
        sns.boxplot(x='target', y='age', data=data)
        plt.title('√Çge par groupe de risque')
        
        plt.subplot(2, 2, 2)
        sns.boxplot(x='target', y='resting bp s', data=data)
        plt.title('Pression art√©rielle par groupe de risque')
        
        plt.subplot(2, 2, 3)
        sns.boxplot(x='target', y='cholesterol', data=data)
        plt.title('Cholest√©rol par groupe de risque')
        
        plt.subplot(2, 2, 4)
        sns.boxplot(x='target', y='oldpeak', data=data)
        plt.title('D√©pression ST par groupe de risque')
        
        plt.tight_layout()
        st.pyplot(fig)
        
    with tab3:
        st.subheader("Guide d'utilisation")
        st.markdown("""
        **Comment utiliser l'application ?**
        1. Remplissez tous les champs du formulaire de pr√©diction
        2. Cliquez sur le bouton "Analyser le risque cardiaque"
        3. Consultez les r√©sultats et recommandations personnalis√©es
        4. Explorez les donn√©es dans l'onglet d'analyse
        """)
        
        st.markdown("---")
        st.subheader("Explications des param√®tres")
        
        with st.expander("D√©tails des variables m√©dicales"):
            st.markdown("""
            - **√Çge**: √Çge du patient en ann√©es
            - **Sexe**: 0 = Femme, 1 = Homme
            - **Type de douleur thoracique**: 
              - 0: Angine typique
              - 1: Douleur atypique
              - 2: Douleur non-angineuse
              - 3: Asymptomatique
            - **Pression art√©rielle**: Pression au repos en mm Hg
            - **Cholest√©rol**: Niveau en mg/dl
            - **Glyc√©mie √† jeun**: 0 = <120 mg/dl, 1 = >120 mg/dl
            - **R√©sultat ECG**: 
              - 0: Normal
              - 1: Anomalie onde ST-T
              - 2: Hypertrophie ventriculaire gauche
            - **Angine induite**: 0 = Non, 1 = Oui
            - **D√©pression ST**: Mesure en mm
            - **Pente ST**: 
              - 0: Descendante
              - 1: Plate
              - 2: Ascendante
            """)
    
        st.markdown("---")
        st.subheader("√Ä propos")
        st.markdown("""
         Notre application permet de pr√©dire le risque cardiaque bas√©e sur une apprentissage automatique.
        
        Notre mod√®le a √©t√© entra√Æn√© sur un jeu de donn√©es de patients avec diff√©rentes caract√©ristiques cardiovasculaires.
        
        ‚ö†Ô∏è **Note importante:** Les r√©sultats sont des estimations statistiques et ne remplacent pas un diagnostic m√©dical professionnel.
        """)           
            
    return None
    

        
        
        
# ---- 3. Affichage des r√©sultats ----
def display_results(prediction, proba, model_type):
    """Affiche les r√©sultats de pr√©diction"""
    st.markdown("---")
    st.subheader(f"üìä R√©sultats ({model_type})")
    
    # Jauge de risque
    risk_level = proba[1] * 100
    if risk_level < 30:
        risk_color = "#28a745"
        risk_label = "Faible"
    elif risk_level < 70:
        risk_color = "#ffc107"
        risk_label = "Mod√©r√©"
    else:
        risk_color = "#dc3545"
        risk_label = "√âlev√©"
    
    # Layout des r√©sultats
    col_res1, col_res2 = st.columns([1, 2])
    
    with col_res1:
        st.markdown(f"""
        <div style="text-align: center;">
            <h2 style="color: {risk_color};">{risk_label}</h2>
            <h3>{risk_level:.1f}% de risque</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Graphique de probabilit√©
        fig, ax = plt.subplots(figsize=(8, 2))
        ax.barh(["Risque"], [risk_level], color=risk_color, height=0.3)
        ax.set_xlim(0, 100)
        ax.set_title('Niveau de risque cardiaque')
        st.pyplot(fig)
    
    with col_res2:
        # Conclusion
        if prediction[0] == 1:
            st.error("**Conclusion:** Risque √©lev√© de maladie cardiaque d√©tect√©")
        else:
            st.success("**Conclusion:** Risque faible de maladie cardiaque d√©tect√©")
        
        # Graphique d√©taill√©
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.barplot(x=['Sain', '√Ä risque'], y=proba, 
                    palette=['#28a745', '#dc3545'], ax=ax)
        ax.set_ylabel('Probabilit√©')
        ax.set_title('Distribution des probabilit√©s')
        for p in ax.patches:
            ax.annotate(f'{p.get_height():.1%}', 
                        (p.get_x() + p.get_width() / 2., p.get_height()), 
                        ha='center', va='center', 
                        xytext=(0, 10), 
                        textcoords='offset points')
        st.pyplot(fig)
    
    # Recommandations
    show_recommendations(prediction)

def show_recommendations(prediction):
    """Affiche les recommandations personnalis√©es"""
    st.markdown("---")
    st.subheader("üìå Recommandations personnalis√©es")
    
    if prediction[0] == 1:
        cols = st.columns(2)
        with cols[0]:
            st.markdown("""
            **üè• Consultation urgente**
            - Rendez-vous cardiologue sous 7 jours
            - Bilan complet: ECG + √©chocardiogramme
            - Surveillance tensionnelle quotidienne
            """)
        with cols[1]:
            st.markdown("""
            **üíä Traitement**
            - √âvaluation m√©dicamenteuse
            - Bilan lipidique approfondi
            - Test d'effort supervis√©
            """)
    else:
        st.markdown("""
        **ü©∫ Pr√©vention active**
        - Contr√¥les annuels apr√®s 40 ans
        - Activit√© physique 150 min/semaine
        - R√©gime m√©diterran√©en recommand√©
        """)

# ---- 4. Fonction principale ----
def main():
    # Chargement des mod√®les
    models = load_models()
    if not models:
        return
    
    # Titre de l'application
    # st.title("üîç Analyse de risque cardiaque - Multi-Mod√®les")
    st.markdown('<div class="header"><h1>Pr√©diction cardiaque</h1></div>', unsafe_allow_html=True)
    
    # S√©lecteur de mod√®le
    model_type = st.radio(
        "S√©lectionnez le mod√®le:",
        ("Decision Tree", "R√©seau de Neurones (ANN)"),
        horizontal=True,
        index=0
    )
    
    # Formulaire de saisie
    input_df = show_input_form(models['feature_names'])
    
    # Pr√©diction
    if input_df is not None:
        try:
            if model_type == "Decision Tree":
                prediction = models['dt'].predict(input_df)
                proba = models['dt'].predict_proba(input_df)[0]
            else:
                # Pr√©traitement pour ANN
                scaled_input = models['scaler'].transform(input_df)
                proba_ann = models['ann'].predict(scaled_input)[0][0]
                proba = [1 - proba_ann, proba_ann]
                prediction = [1] if proba_ann >= 0.5 else [0]
            
            display_results(prediction, proba, model_type)
            
            # Comparaison des mod√®les (optionnel)
            if st.checkbox("Afficher la comparaison des mod√®les"):
                compare_models(models, input_df)
                
        except Exception as e:
            st.error(f"Erreur lors de la pr√©diction: {str(e)}")

def compare_models(models, input_df):
    """Affiche une comparaison des deux mod√®les"""
    st.markdown("---")
    st.subheader("üÜö Comparaison des mod√®les")
    
    # Pr√©dictions
    dt_pred = models['dt'].predict(input_df)[0]
    dt_proba = models['dt'].predict_proba(input_df)[0][1]
    
    scaled_input = models['scaler'].transform(input_df)
    ann_proba = models['ann'].predict(scaled_input)[0][0]
    ann_pred = 1 if ann_proba >= 0.5 else 0
    
    # M√©triques
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Decision Tree", 
                 "√Ä risque" if dt_pred == 1 else "Sain",
                 f"{dt_proba*100:.1f}% de confiance")
    
    with col2:
        st.metric("R√©seau de Neurones", 
                 "√Ä risque" if ann_pred == 1 else "Sain",
                 f"{ann_proba*100:.1f}% de confiance")
    
    # Graphique comparatif
    fig, ax = plt.subplots(figsize=(10, 4))
    models_data = {
        'Decision Tree': dt_proba,
        'R√©seau Neuronal': ann_proba
    }
    sns.barplot(x=list(models_data.keys()), y=list(models_data.values()),
                palette="viridis", ax=ax)
    ax.set_ylim(0, 1)
    ax.set_ylabel('Probabilit√© de risque')
    ax.set_title('Comparaison des pr√©dictions')
    for p in ax.patches:
        ax.annotate(f'{p.get_height():.2f}', 
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center', xytext=(0, 10), 
                   textcoords='offset points')
    st.pyplot(fig)

if __name__ == "__main__":
    main()